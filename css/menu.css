/* stilizarea containerului pentru meniu->vreau ca meniul sa fie fix si pozitionat sus */

.menu-wrap {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1;
}

/* stiizarea checkbox-ului  */
.menu-wrap .toggler {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 2;
  cursor: pointer;
  width: 50px;
  height: 50px;
  opacity: 0;
}

.menu-wrap .hamburger {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  width: 60px;
  height: 60px;
  padding: 1rem;
  background-color: rgba(0, 0, 255, 0.283);
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Hamburger line */

/* crearea primei linii  */
.menu-wrap .hamburger > div {
  position: relative;
  flex: none;
  width: 100%;
  height: 2px;
  background-color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.4s ease;
}

/* Hmaburger Line-top and Bottom Lines->s au creat doua linii in plus */
.menu-wrap .hamburger > div::before,
.menu-wrap .hamburger > div::after {
  content: "";
  position: absolute;
  z-index: 1;
  top: -10px;
  width: 100%;
  height: 2px;
  background: inherit;
}
/* moves line down */
.menu-wrap .hamburger > div::after {
  top: 10px;
}

/* animatie pentru meniu->vreau sa aplic un transform si rotate */
.menu-wrap .toggler:checked + .hamburger > div {
    transform: rotate(135deg);
}
.menu-wrap .toggler:checked + .hamburger > div::before,
.menu-wrap .toggler:checked + .hamburger > div::after{
    top: 0;
    transform: rotate(90deg);
}

/* Rotate on hover when you checked */
.menu-wrap .toggler:checked:hover + .hamburger > div{
    transform: rotate(225deg);
}


/* menu-overlay-styling */
.menu-wrap .menu{
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  visibility: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* se ia div-ul principal din clasa .menu */
.menu-wrap .menu > div{
  background: rgb(207, 192, 255);
  /* vreau sa extind meniul atat pe latime cat si pe inaltime */
  width: 200vw;
  height: 200vw;
  border-radius: 50%;
  display: flex;
  flex: none;
  align-items: center;
  justify-content: center;
  transform: scale(0);
  transition: all 0.4s ease;
}

/* se ia urmatorul div */
.menu-wrap .menu > div >div{
  text-align: center;
  max-width: 90vw;
  max-height: 100vh;
  opacity: 0;
  transition: opacity 0.4s ease;
}

/* stilizarea meniului->iau fiecare list item din cadrul listei neordonate */
.menu-wrap .menu > div > div > nav > ul > li{
  list-style-type: none;
  color: white;
  font-size: 1.5rem;
  padding: 0px 0px 20px 0px;
}

/* stilizarea fiecarui link din interiorul navbarului */
.menu-wrap .menu > div > div > nav > ul > li >a {
  text-decoration: none;
  color: inherit;
  transition: color 0.4s ease;
}

/* show-menu */
.menu-wrap .toggler:checked ~ .menu{
  visibility: visible;

}

.menu-wrap .toggler:checked ~ .menu >div {
  transform: scale(1);
  transition-duration: 0.3s;
}

.menu-wrap .toggler:checked ~ .menu > div > div {
  opacity: 1;
  transition: opacity 0.4s ease 0.4s ;
}

/* in loc sa mai aplica regula cu parinte-copil, pot sa aplica acest operator > pentru a 
evidentia parintele si copilul din clasa curenta */

/* for example-am .menu > div (se aplica stilizarea pentru copilul div din interiorul parintelui
menu) */